/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package distensproject.view;

import distensproject.helper.Separator;
import distensproject.model.Dispensed;
import distensproject.model.DispenserButton;
import distensproject.model.Ingredient;
import distensproject.model.InventoryTableModel;
import distensproject.model.Recipe;
import java.util.Date;
import javax.swing.JOptionPane;

public class Dispenser extends javax.swing.JFrame {
    
    private Ingredient noIngredient = null, currentIngredient = null;
    public static Ingredient[] noDispensed, dispensedMatrix;
    public static Dispensed[] dispensedList = new Dispensed[100];
    private Recipe currentRecipe = null;
    DispenserButton[][] btnMatrix = null;
    private int filas, tama√±o;
    private boolean selected, notSelected, dispensed;
    
    public Dispenser() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        addRecipeCbItems();
        noDispensed = new Ingredient[100]; //Inicializamos la lista de los ingredientes no dispensados
        dispensedMatrix = new Ingredient[100]; //Inicializamos la lista de los ingredientes dispensados
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox3 = new javax.swing.JComboBox<>();
        recipeCb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        noIngredientsCb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        continueBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        ButtonsPanel = new javax.swing.JPanel();

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        recipeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""}));
        recipeCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recipeCbItemStateChanged(evt);
            }
        });
        recipeCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recipeCbActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Receta");

        noIngredientsCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"" }));
        noIngredientsCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noIngredientsCbActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingredientes a no dispensar");

        continueBtn.setText("Continuar");
        continueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancelar");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonsPanelLayout = new javax.swing.GroupLayout(ButtonsPanel);
        ButtonsPanel.setLayout(ButtonsPanelLayout);
        ButtonsPanelLayout.setHorizontalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );
        ButtonsPanelLayout.setVerticalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noIngredientsCb, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(recipeCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap(399, Short.MAX_VALUE)
                        .addComponent(continueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(continueBtn)
                            .addComponent(cancelBtn))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(recipeCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(noIngredientsCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void noIngredientsCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noIngredientsCbActionPerformed
        
        noIngredient = getSelectedIngredient((String) noIngredientsCb.getSelectedItem());
        if(noIngredient!=null){
            noDispensed[noDispensedPointer()] =noIngredient;
            noIngredientBtn(noIngredient);
            noIngredientsCb.removeItem(noIngredient.getName());
        }
    }//GEN-LAST:event_noIngredientsCbActionPerformed
    
    private void noIngredientBtn(Ingredient ingredient){
        if(btnMatrix!=null){ //Verificamos que la matriz haya sido inicializada
            for(int fila = 0; fila<filas;fila++){
                for(int columna = 0;columna<3;columna++){
                    if(btnMatrix[fila][columna]!=null && btnMatrix[fila][columna].getText().equals(ingredient.getName())){
                       btnMatrix[fila][columna].setEnabled(false);
                    }
                }
            }
        }       
    }
    
    /*'Rellena el ComboBox de las recetas con los elementos contenidos en la lista de recetas'*/
    private void addRecipeCbItems(){ 
        for(Recipe reci: Separator.recipes){
            if(reci!=null){
                recipeCb.addItem(reci.getName()); //Agregamos el elemento al combobox por nombre
            }
        }
    }
    
    private void recipeCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recipeCbActionPerformed
        ButtonsPanel.removeAll();
        ButtonsPanel.repaint();
        noIngredientsCb.removeAllItems();
        noIngredientsCb.addItem("");
        currentRecipe = getSelectedRecipe((String) recipeCb.getSelectedItem());
        if(currentRecipe!=null){  
            for(Ingredient currentIn: currentRecipe.getIngredients()){
                if(currentIn!=null){
                    noIngredientsCb.addItem(currentIn.getName());
                }
            }
            
            generateBtnMatrix();
            
        }else{
        
        }
    }//GEN-LAST:event_recipeCbActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose(); //Cerramos la ventana actual
        MainWindow main = new MainWindow(); //Creamos otra ventana principal
        main.setVisible(true); //La mostramos
    }//GEN-LAST:event_cancelBtnActionPerformed
    
    private Date getCurrentDate(){
        return new Date();
    }
    
    private void continueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueBtnActionPerformed
        allSelected();//Verificamos que todos los botones est√©n seleccionados 
        if(!notSelected){ 
            String msgg = createMessagge(); //Variable que guardar√° el mensaje que se mostrar√° en pantalla
            currentRecipe.setGain(currentRecipe.getGain()+currentRecipe.getPrice()); //Agregamos al monto acumulado de esta receta el precio de la misma
            Dispensed newDispensed = new Dispensed(dispensedPointer()+1, currentRecipe, noDispensed, dispensedMatrix,getCurrentDate());
            dispensedList[dispensedPointer()] = newDispensed;
            JOptionPane.showMessageDialog(this, msgg, "Agregado", JOptionPane.INFORMATION_MESSAGE); //Mostramos el mensaje
            
            this.dispose(); //Eliminamos la ventana donde est√°bamos trabajando, la 'cerramos'
            Dispenser dispenser = new Dispenser(); //Creamos una nueva ventana
            dispenser.setVisible(true); //La mostramos
            dispensedMatrix = new Ingredient[100];
        }else{ 
            //Si los botones no estan seleccionados mostramos este mensaje de error
            JOptionPane.showMessageDialog(this, "Debe dispensar todos los ingredientes", "Error",
                            JOptionPane.ERROR_MESSAGE);
            notSelected = false;
        }
    }//GEN-LAST:event_continueBtnActionPerformed

    private void recipeCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_recipeCbItemStateChanged
        
    }//GEN-LAST:event_recipeCbItemStateChanged
    
    /*Con este metodo se crea el mensaje que se ense√±a al finalizar de 
    dispensar correctamente la receta*/
    public String createMessagge(){
        String messagge,ingredients ="", recipe, nDispensedStr=""; //Iniciamos las variables
        recipe = currentRecipe.getName(); //Obtenemos el nombre de la receta
        for(Ingredient i :dispensedMatrix){ //Recorremos toda la lista de ingredientes de la receta con la que estamos trabajando
            if(i!=null){  //Verificamos que el elemento no sea nulo             
                ingredients += "-"+ i.getName() + "-"; 
            }
        }
        for(Ingredient iu: noDispensed){ //Recorremos toda la lista de ingredientes que no fueron dispensados en la receta
            if(iu!=null){ //Verificamos que el elemento no sea nulo
                nDispensedStr += "-" + iu.getName() +"-"; //Agregamos a la 'linea' el nombre del ingrediente junto con dos guiones, es decir, '-ingrediente-'
            }
        }
        messagge = "Receta: "+recipe + "\n"+ //Con todos los elementos individuales 'llenos' ya podemos ensamblar toda la frase
                "INGREDIENTES: " +ingredients +"\n" +
                        "NO DISPENSADO" + nDispensedStr;
        return messagge; //Retornamos el mensaje
    }
    
    /*Verifica que todos los botones de la matriz hayan sido seleccionados
    para continuar con el proceso*/
    private void allSelected(){
        if(btnMatrix!=null){//Verificamos que la matriz de botones no sea nula
            for(int fila = 0; fila<filas;fila++){ //Recorremos la matriz espacio por espacio verificando que los botones esten deshabilitados
                for(int columna = 0;columna<3;columna++){
                    if(btnMatrix[fila][columna]!=null){
                        if(btnMatrix[fila][columna].isEnabled()){//Si hay algun boton habilitado eso significa que el proceso de dispensar no ha terminado
                            notSelected = true; //Con que haya un boton habilitado significa que el proceso no ha terminado
                        }
                    }
                }
            }
        } 
    }
    
    /*Obtenemos la receta seleccionada en el ComboBox*/
    private Recipe getSelectedRecipe(String recipeName){
        if(Separator.recipesPointer()!=0){ //Verificamos que la lista de recetas no est√° vac√≠a
            for(Recipe re: Separator.recipes){ //Si no esta vacia, recorremos toda la lista de recetass.
                
                
                if(re!=null){
                    if(re.getName().equals(recipeName)){
                        return re;
                    }
                }
            }
        }
        return null;
    }
    
    /*Retorna el ingrediente seleccionado y lo busca en la lista por su nombre*/
    private Ingredient getSelectedIngredient(String ingredientName){
        if(InventoryTableModel.pointer()!=0){ //Verifica que la lista no este vacia
            for(Ingredient ing: InventoryTableModel.inventory){ //Recorre toda la lista
                if(ing!=null){ //Verifica que el elemento actual no sea nulo
                    if(ing.getName().equals(ingredientName)){ //Compara el nombre del elemento actual con el nombre obtenido del combobox
                        return ing; //Retorna el elemento
                    }
                }
            }
        }        
        return null;
    }
    
    /*Tama√±o de la lista temporal de intredientes*/
    private int currentPointer(Ingredient[] currentList){
        int count = 0;
        for(Ingredient i:currentList){
            if(i!=null){
                count++;
            }
        }
        return count;
    }
    
    private int dispensedPointer(){
        int count = 0;
        for(Dispensed dis: dispensedList){
            if(dis!=null){
                count++;
            }
        }
        return count;
    }
    
    /*Tama√±o de la lista de ingredientes no dispensados*/
    private int noDispensedPointer(){
        int count = 0;
        for(Ingredient in: noDispensed){
            if(in!=null){
                count++;
            }
        }
        return count;
    }
    
    public static int dispensedMatrixPointer(){
        int count = 0;
        for(Ingredient ingre: dispensedMatrix){
            if(ingre!=null){
                count++;
            }
        }return count;
    }
    
    /*Metodo que genera la matriz de botones conforme a la receta elegida*/
    private void generateBtnMatrix(){
        btnMatrix = null;
        if(currentRecipe!=null){ //Verifica que la receta actual (la que se obtiene al momento de seleccionar el ComboBox) no sea nula
            filas = (currentPointer(currentRecipe.getIngredients())/3)+1; //Obtenemos el numero de filas de la matriz
            tama√±o = currentPointer(currentRecipe.getIngredients()); //Obtenemos la cantidad de elementos que hay en la matriz
            btnMatrix = new DispenserButton[filas][3]; //Creamos una nueva matriz 
            for(int fila =0; fila<=filas;fila++){
                for(int columna = 0; columna<3;columna++){
                    if(tama√±o!=0){ 
                        btnMatrix[fila][columna] = new DispenserButton(100*columna, 50*fila, 100,50, 
                                currentRecipe.getIngredients()[tama√±o-1], noIngredientsCb);
                        ButtonsPanel.add(btnMatrix[fila][columna]);
                        tama√±o--;
                    }
                }
            }
        }   
    }
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dispenser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dispenser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dispenser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dispenser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dispenser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton continueBtn;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> noIngredientsCb;
    private javax.swing.JComboBox<String> recipeCb;
    // End of variables declaration//GEN-END:variables
}
